================================

Modern C++

Peter Loos

Guten Morgen

peter.loos@gmx.de

================================

https://github.com/pelocpp

https://github.com/pelocpp/cpp_modern

================================

Initialisierung

std::initializer_list

const // const_expr

std::string vs. str::string_view

emplace 

================================

Ziel: Move-Semantik

RValue // LValue

a) Beispiel
b) Ergänzendes Material / Dokumentation



Ab C++ 11:

Kritikpunkte an C++:   Unnötige Kopien

Langsamer als C  ==> Performanz


RValue: WOZU ????????????????????????????????????????

Move-Semantik:
--------------

// Vergleich:

.... A0     // temporär am Stack // wird freigegeben
.... 10     // im Vektor (wurde kopiert von dem tmp. Objekt vom Stack)

--------------------------------------

.... 60

--------------------------------------

.... B0

=================================================

auto

Threading:

Bei Threading sollte man beim Gebrauch von Referenzen VORSICHTIG sein
.... oder diese eher NICHT verwenden.

Da ist eine Kopie besser !!!!!!!

In Bezug auf auto:   Man verwende auto und nicht auto&

=================================================

Algorithmen:

Call-to-Action: Algorithmen der STL einsetzen


for-Schleife


Architektur der STL:

A) Container:

   Verwalten Daten

   std::vector:  lineare Ablage

   std::unordered_map:   Hash Tabelle // Dictionary

B) Zugriff: Iteratoren

   Das "erste", "zweite", dritte Element

   == Iteratoren ermöglichen Zugriff
   == Mit Iteratoren kann man durch einen
      Container durchaufen
   == Iteratoren kennen Operatoren:

      !=    *    ++ nächsten Position


C) STL Algorithmen

   Sind einfache Operationen auf STL Containern

== Container

    begin(), end()

   |
   |
   V


== Iteratoren

   |
   |
   V

== Algorithmus: Traversieren:  std::for_each



std:fill:

std::memset,  std::memmov, ....


=================================================

Lambda


Was ist der Unterschied zwischen std::function und Lambda ???

std::function:

ALLES, was aufrufbar ist, datentechnisch in die Hand
nehmen kannst.

== C-Funktion
== Methode eines Objekt
== Lambda 
== std::greater
== Callable Object ...

"Lambda - Funktion"

NEIN: Lambda - Objekte   : Von welcher Klasse

// Die ist versteckt .. .oder wird vom Compiler erzeugt.


Lambda - Objekte :

Was besitzen Objekte:  Instanzariablen

Eine Methode , die im Zentrum des Lambda-Objekts steht.

Signatur:

Beispiel:

void  (int wert) const;   // <======= ist const :-(

Erste Tage von C++:   

const-nes abschalten:  mutable

Wie groß ist dieses Lambda - Objekt:

"Cpp Insights"

Hilfestellung:

Classic C++ =========> Modern C++

Verständnis:

Wie wird Modern C++ auf Classic C++ umgesetzt ???

Beispiel:

#include <iostream>

void testSeminar_intro() { 

   auto myLambda = [](int wert) { std::cout << wert << " "; };
}

Ausgabe:

void testSeminar_intro()
{
  std::basic_string<char, std::char_traits<char>, std::allocator<char> > header = std::basic_string<char, std::char_traits<char>, std::allocator<char> >("Wert: ", std::allocator<char>());
    
  class __lambda_7_20
  {
    public: 
    inline /*constexpr */ void operator()(int wert) const
    {
      std::operator<<(std::operator<<(std::cout, header).operator<<(wert), " ");
    }
    
    private: 
    std::string & header;   // oder
    std::string header;
    
    public:
    __lambda_7_20( std::string & _header)
    : header{_header}
    {}
    
  };
  
  __lambda_7_20 myLambda = __lambda_7_20{header};
  myLambda.operator()(123);
}


=======================================================

Call-to-Action:

Wann verwende ich Lambdas

A) Wenn man STL Algorithmen einsetzt.

B) Hier sollte man Lambdas verwenden.

=======================================================
=======================================================

Smart Pointer
-------------

Was ist das Problem mit new ???

Wir könnten das delete vergessen.

Antwort: "Wer ist der Besitzer des Zeigers ???"



Lösungen / Ideen:

A) Objekt-Orientierung.

   Klassen und Objekte

B) Konstruktoren / Destruktoren

   Wann wir ein Destruktor aufgerufen?

   {
        Foo f;


   }    <=== Destruktor von f

   Aufruf ist deterministisch.

C) Idee:  Man gebe einen Zeiger in die Obhut
          eines Objekts // Hüllenobjekt.

   Hüllenobjekt:  Konstruktor ==> new

                  Destruktor  ==> delete

    Beobachtung:  Scope ist etwas "kleineres"


AUSSAGE:  Roh-Zeiger / Raw-Pointer wird durch
          ein Hüllenobjekt verwaltet.

auto_ptr  ===> deprecated


MEHRERE Hüllenklassen / Unterschiedliche Strategien.

std::unique_ptr
std::shared_ptr
std::weak_ptr

i) std::unique_ptr

Strategie: Ein std::unique_ptr-Objekt kann zu
           einem Zeitpunkt nur EINEN Besitzer haben.

           Diesen kann man durch "Verschieben" ändern.

           Den Besitz kann man weiterreichen.


ii) std::shared_ptr

Strategie: Ein std::shared_ptr-Objekt kann zu
           einem Zeitpunkt MEHRERE Besitzer haben.

           Diese werden gezählt:  Referenzzähler:  0 -> 1 -> 2 -> 1 -> 0.

Bemerkung: std::weak_ptr unterstützt die Klasse std::shared_ptr.

=========================================================

Rückgabe von Werten aus Unterprogrammen:

RVO - Return Value Optimization.

Copy/Move Elision

to elide

=========================================================

Frage:

Go-for

== std::unique_ptr  ???
== std::shared_ptr  ???

2 ABER:

i)  std::shared_ptr BZGL. REFERENZZÄHLER ist ein Mutex dabei // langsamer

ii) std::shared_ptr: FUNKTIONIERT NICHT IMMER !!!!!!!!!!!!!!!!!!!!!!!

Migration: Es wird jeder "klassische" Zeiger durch einen shared_ptr
           ausgetauscht: Never :)

2 Antwort: 

i)   Wie arbeite ich mit dem std::weak_ptr ???    
ii)  Was ist das Problem des std::shared_ptr ???  Zyklen
iii) Wie arbeitet man mit std::shared_ptr UND std::weak_ptr ???



Zyklische Referenzen:

Struktur:   Observer-Pattern

"Es wird ein Objekt beobachtet"

a) Ziel-Objekt: Wird beobachtet.

b) Clients:  Beobachter: Diese beobachten das Ziel-Objekt.

Okay:

Wenn im Ziel-Objekt eine Änderung eintritt,
werden die Clients benachrichtig // wird eine Methode
an den Clients aufgerufen.

Bedeutet:

Ein Client meldet sich am Ziel-Objekt an,
um Benachrichtigungen zu erhalten.

Das Ziel-Objekt kennt ein oder mehrere Clients
und benachrichtigt diese.

FAZIT:

a) Das Ziel-Objekt kennt eine oder mehrere  Clients.

b) Ein oder mehrere Clients kennen ihr Ziel-Objekt.

Das ist ein Zyklus !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Wie lässt sich dieses Szenario - trotz Zyklus - korrekt realisieren ???

A) Ziel-Objekt: Wird mit std::shared_ptr angelegt.
   (Hauptprogramm)

B) Alle Client-Objekte: Werden alle mit std::shared_ptr angelegt.
   (Hauptprogramm)

C) Beobachtung: Ein Client meldet sich am Ziel-Objekt an.

   zielObjekt.attach (clientObject);

   Wie sollte IM Ziel-Objekt die Variable 'clientObject' (shared_ptr)
   aufgehoben / abgespeichert werden ???????????????

   Als  std::weak_ptr !!!!!!!!


Szenario:

 Ziel-Objekt lebt LANGE.

 Ein Client Objekt geht aus dem Speicher. // kein shared-ptr mehr.

 UND: Er hat sich NICHT ge-detached !!!

 Was ist im Ziel-Objekt "übrig" geblieben von diesem  Client Objekt:

 Ein Weak-Ptr !!!

 ==> Das Ziel-Objekt könnte meinen, dieser Client lebt noch.

  ==> Das Ziel-Objekt muss lock aufrufen .... shared_ptr: null

  Dieser Pointer (Null) ist zu ignorieren.


==================================================================================================


Unit Testing C++


Google Test

Catch2      Header-Only - Version 2

Version 3:  Bibibliothek

Catch2 is a multi-paradigm test framework for C++

Unit Test

BDD - Behaviour Driven Design

=================================================

Wie finde ich einen seltenen / sporadischen Fehler:

Debugging



Logging / Trace


Konsole: PowerShell // Shell Skript

======================================

Catch

Header-only. (until v3, which becomes a library, faster compile times)

Supports unit-tests with bdd style (in this style you do not need fixtures anymore).

Easy to get started.

Does not support mock objects.

One single REQUIRE macro for almost any comparison. Easy to use.

Boost.Test

Supports data driven tests since 1.60 (if I do not recall incorrectly). Very useful for random testing generating data.

Since 1.60, supports single BOOST_CHECK macro, same as CATCH.

No support for mock objects, though you can use boost.turtle. I used it together with boost/catch and it did a good job.

Supports header-only and library variants. You should use library variant in general.

Google Test

Supports death tests (tests that would break the machine, such as segfaults).

Comes with google mock. You have mocking out of the box.

Does not support C++11 move semantics. I recall this was annoying at some point for my testing.

Must embed in your project as a source to compile with the rest of your code.

Many different macros. You have to remember a bit more than with Boost.Test and Catch in this area. Not a problem, though.

===================================================================

Initialisierung:

Neue Syntax

Alte Syntax geht auch .............

"In einem Satz: () ==> {}"


===================================================================

Initialisierung:    Initialisierungs-Liste

std::initializer_list:    ===> STACK

std::vector:              ===> HEAP

LAUFZEIT // PERFORMANZ

std::initializer_list:    Leichtgewichtiger Container

===================================================================

Hübschere Konstruktoren:

Listen-Konstruktor



std::vector<int> vec (10);  ==> 10 ints, alle 0

std::vector<int> vec{ 10 }; ==> 1 int, Wert 10


=================================================

Go for 'const' !!!!!!!!!!!!!!!!!!!!!!!!!!!


Kritiker: Freunde der funktionalen Programmierung.

Werbung:

Funktionalen Programmierung: ist schnell

Why:  CPU ... Pipelining // Parallelisierung

Weil Funktionale Programme haben keinen ZUSTAND.
                 Instanzvariablen

C++: Wir können den Code-Generator unterstützen:
Mit möglichst viel Einsatz von 'const' !!!!

=================================================

emplace_back  // emplace.


Call-to-Action:


Go for emplace

=================================================

Call-to-Action:

Go for noexcept
